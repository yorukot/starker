// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Authenticates a user with email and password, returns a refresh token cookie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authsvc.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body, user not found, or invalid password",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/oauth/{provider}": {
            "get": {
                "description": "Redirects user to OAuth provider for authentication",
                "tags": [
                    "oauth"
                ],
                "summary": "Initiate OAuth flow",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth provider (e.g., google, github)",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Redirect URL after successful OAuth linking",
                        "name": "next",
                        "in": "query"
                    }
                ],
                "responses": {
                    "307": {
                        "description": "Redirect to OAuth provider",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid provider or bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/oauth/{provider}/callback": {
            "get": {
                "description": "Handles OAuth provider callback, processes authorization code, creates/links user accounts, and issues authentication tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "oauth"
                ],
                "summary": "OAuth callback handler",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth provider (e.g., google, github)",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Authorization code from OAuth provider",
                        "name": "code",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "OAuth state parameter for CSRF protection",
                        "name": "state",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "307": {
                        "description": "Redirect to success URL with authentication cookies set",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid provider, oauth state, or verification failed",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during user creation or token generation",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Refreshes the access token and returns a new refresh token cookie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh token",
                "responses": {
                    "201": {
                        "description": "Access token generated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body, refresh token not found, or refresh token already used",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Creates a new user account with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "Registration request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authsvc.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User registered successfully",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or email already in use",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/teams": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Gets all teams that the authenticated user is a member of",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "team"
                ],
                "summary": "Get user's teams",
                "responses": {
                    "200": {
                        "description": "Teams retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Team"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new team with the authenticated user as the owner",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "team"
                ],
                "summary": "Create a new team",
                "parameters": [
                    {
                        "description": "Create team request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/team.createTeamRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team created successfully",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/teams/{teamID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Gets a specific team by ID if the authenticated user is a member of it",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "team"
                ],
                "summary": "Get a specific team",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID",
                        "name": "teamID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Team"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Team not found or user is not a member",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a team if the authenticated user is the owner",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "team"
                ],
                "summary": "Delete a team",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID",
                        "name": "teamID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Team ID is required",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Only team owner can delete the team",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Team not found or user is not a member",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates a team's name if the authenticated user is the owner",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "team"
                ],
                "summary": "Update a team",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID",
                        "name": "teamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update team request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/team.UpdateTeamRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team updated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Team"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body or team ID is required",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Only team owner can update the team",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Team not found or user is not a member",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/teams/{teamID}/private-keys": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all private keys associated with a specific team",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "privatekey"
                ],
                "summary": "Get all private keys for a team",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID",
                        "name": "teamID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Private keys retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.PrivateKey"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Team access denied",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new private key for SSH authentication within a team",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "privatekey"
                ],
                "summary": "Create a new private key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID",
                        "name": "teamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Private key creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/privatekeysvc.CreatePrivateKeyRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Private key created successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.PrivateKey"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body or team access denied",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/teams/{teamID}/private-keys/{privateKeyID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a specific private key by ID within a team",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "privatekey"
                ],
                "summary": "Get a specific private key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID",
                        "name": "teamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Private Key ID",
                        "name": "privateKeyID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Private key retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.PrivateKey"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Team access denied",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Private key not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a specific private key by ID within a team",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "privatekey"
                ],
                "summary": "Delete a private key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID",
                        "name": "teamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Private Key ID",
                        "name": "privateKeyID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Private key deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Team access denied",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Private key not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates a specific private key by ID within a team",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "privatekey"
                ],
                "summary": "Update a private key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID",
                        "name": "teamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Private Key ID",
                        "name": "privateKeyID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Private key update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/privatekeysvc.UpdatePrivateKeyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Private key updated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.PrivateKey"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body or team access denied",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Private key not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/teams/{teamID}/projects": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all projects that belong to a specific team",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "project"
                ],
                "summary": "Get all projects in a team",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID",
                        "name": "teamID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Projects retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Project"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Team access denied",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new project within a team for managing deployments and configurations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "project"
                ],
                "summary": "Create a new project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID",
                        "name": "teamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Project creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/projectsvc.CreateProjectRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Project created successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Project"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body or team access denied",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/teams/{teamID}/projects/{projectID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a specific project by its ID within a team",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "project"
                ],
                "summary": "Get a specific project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID",
                        "name": "teamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "projectID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Project"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Team access denied",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Project not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates an existing project within a team",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "project"
                ],
                "summary": "Update a project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID",
                        "name": "teamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "projectID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Project update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/projectsvc.UpdateProjectRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project updated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Project"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body or team access denied",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Project not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes an existing project from a team",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "project"
                ],
                "summary": "Delete a project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID",
                        "name": "teamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "projectID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Team access denied",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Project not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/teams/{teamID}/projects/{projectID}/services": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all services belonging to a specific project within a team",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service"
                ],
                "summary": "Get all services for a project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID",
                        "name": "teamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "projectID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of services",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Service"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Team access denied",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/teams/{teamID}/projects/{projectID}/services/compose": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new service with Docker compose configuration within a team and project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service"
                ],
                "summary": "Create a new service",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID",
                        "name": "teamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "projectID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Service creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.createServiceRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Service created successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Service"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body, team access denied, or project not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/teams/{teamID}/projects/{projectID}/services/{serviceID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a specific service by its ID within a project and team",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service"
                ],
                "summary": "Get a single service by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID",
                        "name": "teamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "projectID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Service ID",
                        "name": "serviceID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Service details",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Service"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Team access denied or service not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a service including stopping Docker containers, removing networks/volumes, and cleaning up all related database records",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service"
                ],
                "summary": "Delete service with complete cleanup",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID",
                        "name": "teamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "projectID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Service ID",
                        "name": "serviceID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Service deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request or team access denied",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Service not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates service metadata (name, description, type) within a team and project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service"
                ],
                "summary": "Update service metadata",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID",
                        "name": "teamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "projectID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Service ID",
                        "name": "serviceID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Service update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.updateServiceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Service updated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Service"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body or team access denied",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Service not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/teams/{teamID}/projects/{projectID}/services/{serviceID}/compose": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the Docker Compose configuration for a specific service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service"
                ],
                "summary": "Get service Docker Compose configuration",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID",
                        "name": "teamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "projectID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Service ID",
                        "name": "serviceID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Service compose configuration",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.ServiceComposeConfig"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Team access denied or compose config not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the Docker Compose configuration for a specific service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service"
                ],
                "summary": "Update service Docker Compose configuration",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID",
                        "name": "teamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "projectID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Service ID",
                        "name": "serviceID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Service compose update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.updateServiceComposeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Compose config updated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.ServiceComposeConfig"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body, team access denied, or service not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/teams/{teamID}/projects/{projectID}/services/{serviceID}/containers": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all containers associated with a specific service within a project and team",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service"
                ],
                "summary": "Get all containers for a service",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID",
                        "name": "teamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "projectID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Service ID",
                        "name": "serviceID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of service containers",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.ServiceContainer"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Team access denied or service not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/teams/{teamID}/projects/{projectID}/services/{serviceID}/containers/{containerID}/logs": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves Docker container logs for a specific service container with real-time streaming via Server-Sent Events",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/event-stream"
                ],
                "tags": [
                    "service"
                ],
                "summary": "Get container logs with SSE streaming",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID",
                        "name": "teamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "projectID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Service ID",
                        "name": "serviceID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Container ID (from service_containers table)",
                        "name": "containerID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Follow log output (stream continuously)",
                        "name": "follow",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"100\"",
                        "description": "Number of lines to show from end of logs",
                        "name": "tail",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Include timestamps in log output",
                        "name": "timestamps",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"2023-01-01T00:00:00Z\"",
                        "description": "Show logs since timestamp (RFC3339 format)",
                        "name": "since",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SSE stream of container logs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Team access denied, service/container not found, or invalid parameters",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/teams/{teamID}/projects/{projectID}/services/{serviceID}/env": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all environment variables for a specific service within a team and project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service"
                ],
                "summary": "Get all environment variables for a service",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID",
                        "name": "teamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "projectID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Service ID",
                        "name": "serviceID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Environment variables retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.ServiceEnvironment"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request or team access denied",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Service not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates multiple existing environment variables for a specific service within a team and project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service"
                ],
                "summary": "Update multiple environment variables for a service",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID",
                        "name": "teamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "projectID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Service ID",
                        "name": "serviceID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Batch environment variables update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.updateServiceEnvironmentsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Environment variables updated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.ServiceEnvironment"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body or team access denied",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Service or environment variable not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/teams/{teamID}/projects/{projectID}/services/{serviceID}/state": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates service state (start/stop/restart) with real-time progress streaming via Server-Sent Events",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/event-stream"
                ],
                "tags": [
                    "service"
                ],
                "summary": "Update service state with SSE streaming",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID",
                        "name": "teamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "projectID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Service ID",
                        "name": "serviceID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Service state update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.updateServiceStateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SSE stream of service state updates",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or team access denied",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Service not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/teams/{teamID}/servers": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Gets all server configurations within a team that the user has access to",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "server"
                ],
                "summary": "Get all servers for a team",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID",
                        "name": "teamID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Servers retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Server"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Team access denied",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new server configuration for SSH connections within a team. Tests the connection before saving.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "server"
                ],
                "summary": "Create a new server",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID",
                        "name": "teamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Server creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.createServerRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Server created successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Server"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body, team access denied, or server connection failed",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/teams/{teamID}/servers/{serverID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Gets a specific server configuration by ID within a team that the user has access to",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "server"
                ],
                "summary": "Get a specific server",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID",
                        "name": "teamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Server ID",
                        "name": "serverID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Server retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Server"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Team access denied",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Server not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates an existing server configuration within a team",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "server"
                ],
                "summary": "Update a server",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID",
                        "name": "teamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Server ID",
                        "name": "serverID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Server update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.updateServerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Server updated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Server"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body or team access denied",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Server not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a specific server configuration by ID within a team",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "server"
                ],
                "summary": "Delete a server",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID",
                        "name": "teamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Server ID",
                        "name": "serverID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Server deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Team access denied",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Server not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the profile information of the currently authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get current user information",
                "responses": {
                    "200": {
                        "description": "User profile information",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.User"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "authsvc.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 255
                },
                "password": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 8
                }
            }
        },
        "authsvc.RegisterRequest": {
            "type": "object",
            "required": [
                "display_name",
                "email",
                "password"
            ],
            "properties": {
                "display_name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 3
                },
                "email": {
                    "type": "string",
                    "maxLength": 255
                },
                "password": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 8
                }
            }
        },
        "models.ContainerState": {
            "type": "string",
            "enum": [
                "running",
                "stopped",
                "removed",
                "exited"
            ],
            "x-enum-varnames": [
                "ContainerStateRunning",
                "ContainerStateStopped",
                "ContainerStateRemoved",
                "ContainerStateExited"
            ]
        },
        "models.PrivateKey": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Timestamp when the key was created",
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "description": {
                    "description": "Private key description",
                    "type": "string",
                    "example": "SSH key for production servers"
                },
                "fingerprint": {
                    "description": "Key fingerprint",
                    "type": "string",
                    "example": "SHA256:abc123..."
                },
                "id": {
                    "description": "Unique identifier for the private key",
                    "type": "string",
                    "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                },
                "name": {
                    "description": "Private key name",
                    "type": "string",
                    "example": "Production Key"
                },
                "private_key": {
                    "description": "The actual private key content",
                    "type": "string",
                    "example": "-----BEGIN PRIVATE KEY-----..."
                },
                "team_id": {
                    "description": "Associated team ID",
                    "type": "string",
                    "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                },
                "updated_at": {
                    "description": "Timestamp when the key was last updated",
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                }
            }
        },
        "models.Project": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Timestamp when the project was created",
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "description": {
                    "description": "Project description",
                    "type": "string",
                    "example": "A web application built with React"
                },
                "id": {
                    "description": "Unique identifier for the project",
                    "type": "string",
                    "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                },
                "name": {
                    "description": "Project name",
                    "type": "string",
                    "example": "My Web Application"
                },
                "team_id": {
                    "description": "Associated team ID",
                    "type": "string",
                    "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                },
                "updated_at": {
                    "description": "Timestamp when the project was last updated",
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                }
            }
        },
        "models.Server": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Timestamp when the server was created",
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "description": {
                    "description": "Server description",
                    "type": "string",
                    "example": "Main production server"
                },
                "id": {
                    "description": "Unique identifier for the server",
                    "type": "string",
                    "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                },
                "ip": {
                    "description": "Server IP address",
                    "type": "string",
                    "example": "192.168.1.100"
                },
                "name": {
                    "description": "Server name",
                    "type": "string",
                    "example": "Production Server"
                },
                "port": {
                    "description": "SSH port",
                    "type": "string",
                    "example": "22"
                },
                "private_key_id": {
                    "description": "Associated private key ID",
                    "type": "string",
                    "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                },
                "team_id": {
                    "description": "Associated team ID",
                    "type": "string",
                    "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                },
                "updated_at": {
                    "description": "Timestamp when the server was last updated",
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "user": {
                    "description": "SSH username",
                    "type": "string",
                    "example": "ubuntu"
                }
            }
        },
        "models.Service": {
            "type": "object",
            "properties": {
                "container_id": {
                    "description": "Docker container ID",
                    "type": "string",
                    "example": "abc123..."
                },
                "created_at": {
                    "description": "Timestamp when the service was created",
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "description": {
                    "description": "Service description",
                    "type": "string",
                    "example": "Main web application service"
                },
                "id": {
                    "description": "Unique identifier for the service",
                    "type": "string",
                    "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                },
                "last_deployed_at": {
                    "description": "Timestamp when the service was last deployed",
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "name": {
                    "description": "Service name",
                    "type": "string",
                    "example": "web-app"
                },
                "project_id": {
                    "description": "Associated project ID",
                    "type": "string",
                    "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                },
                "server_id": {
                    "description": "Associated server ID",
                    "type": "string",
                    "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                },
                "state": {
                    "description": "Service state (running, stopped, etc.)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.ServiceState"
                        }
                    ],
                    "example": "running"
                },
                "team_id": {
                    "description": "Associated team ID",
                    "type": "string",
                    "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                },
                "type": {
                    "description": "Service type (e.g., docker, compose)",
                    "type": "string",
                    "example": "docker"
                },
                "updated_at": {
                    "description": "Timestamp when the service was last updated",
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                }
            }
        },
        "models.ServiceComposeConfig": {
            "type": "object",
            "properties": {
                "compose_file": {
                    "description": "Docker compose file content",
                    "type": "string",
                    "example": "version: '3.8'..."
                },
                "created_at": {
                    "description": "Timestamp when the config was created",
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "id": {
                    "description": "Unique identifier for the compose config",
                    "type": "string",
                    "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                },
                "service_id": {
                    "description": "Associated service ID",
                    "type": "string",
                    "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                },
                "updated_at": {
                    "description": "Timestamp when the config was last updated",
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                }
            }
        },
        "models.ServiceContainer": {
            "type": "object",
            "properties": {
                "container_id": {
                    "description": "Docker container ID",
                    "type": "string",
                    "example": "abc123def456"
                },
                "container_name": {
                    "description": "Docker container name",
                    "type": "string",
                    "example": "web-app-container"
                },
                "created_at": {
                    "description": "Timestamp when the container were created",
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "id": {
                    "description": "Unique identifier for the container record",
                    "type": "string",
                    "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                },
                "service_id": {
                    "description": "Associated service ID",
                    "type": "string",
                    "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                },
                "state": {
                    "description": "Container state",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.ContainerState"
                        }
                    ],
                    "example": "running"
                },
                "updated_at": {
                    "description": "Timestamp when the container was last updated",
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                }
            }
        },
        "models.ServiceEnvironment": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Timestamp when the environment variable was created",
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "id": {
                    "description": "Unique identifier for the environment variable",
                    "type": "string",
                    "example": "1"
                },
                "key": {
                    "description": "Environment variable key",
                    "type": "string",
                    "example": "NODE_ENV"
                },
                "service_id": {
                    "description": "Associated service ID",
                    "type": "string",
                    "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                },
                "updated_at": {
                    "description": "Timestamp when the environment variable was last updated",
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "value": {
                    "description": "Environment variable value",
                    "type": "string",
                    "example": "production"
                }
            }
        },
        "models.ServiceState": {
            "type": "string",
            "enum": [
                "running",
                "stopped",
                "starting",
                "stopping",
                "restarting"
            ],
            "x-enum-varnames": [
                "ServiceStateRunning",
                "ServiceStateStopped",
                "ServiceStateStarting",
                "ServiceStateStopping",
                "ServiceStateRestarting"
            ]
        },
        "models.Team": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "avatar": {
                    "description": "URL to user's avatar image",
                    "type": "string",
                    "example": "https://example.com/avatar.jpg"
                },
                "created_at": {
                    "description": "Timestamp when the user was created",
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "display_name": {
                    "description": "Display name for the user",
                    "type": "string",
                    "example": "John Doe"
                },
                "id": {
                    "description": "Unique identifier for the user",
                    "type": "string",
                    "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                },
                "updated_at": {
                    "description": "Timestamp when the user was last updated",
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                }
            }
        },
        "privatekeysvc.CreatePrivateKeyRequest": {
            "type": "object",
            "required": [
                "name",
                "private_key"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "maxLength": 500
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 3
                },
                "private_key": {
                    "type": "string"
                }
            }
        },
        "privatekeysvc.UpdatePrivateKeyRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "maxLength": 500
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 3
                },
                "private_key": {
                    "type": "string"
                }
            }
        },
        "projectsvc.CreateProjectRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "maxLength": 500
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 3
                }
            }
        },
        "projectsvc.UpdateProjectRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "maxLength": 500
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 3
                }
            }
        },
        "response.ErrorResponse": {
            "type": "object",
            "properties": {
                "err_code": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "response.SuccessResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                }
            }
        },
        "server.createServerRequest": {
            "type": "object",
            "required": [
                "ip",
                "name",
                "port",
                "private_key_id",
                "user"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "maxLength": 500
                },
                "ip": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 3
                },
                "port": {
                    "type": "string",
                    "maxLength": 5,
                    "minLength": 1
                },
                "private_key_id": {
                    "type": "string"
                },
                "user": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                }
            }
        },
        "server.updateServerRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "maxLength": 500
                },
                "ip": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 3
                },
                "port": {
                    "type": "string",
                    "maxLength": 5,
                    "minLength": 1
                },
                "private_key_id": {
                    "type": "string"
                },
                "user": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                }
            }
        },
        "service.createServiceRequest": {
            "type": "object",
            "required": [
                "compose_file",
                "name",
                "server_id",
                "type"
            ],
            "properties": {
                "compose_file": {
                    "description": "Docker compose file content",
                    "type": "string",
                    "example": "version: '3.8'..."
                },
                "description": {
                    "description": "Optional service description",
                    "type": "string",
                    "maxLength": 500,
                    "example": "Web application service"
                },
                "name": {
                    "description": "Service name",
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 3,
                    "example": "web-app"
                },
                "server_id": {
                    "description": "Server ID where service will be deployed",
                    "type": "string",
                    "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                },
                "type": {
                    "description": "Service type (docker or compose)",
                    "type": "string",
                    "enum": [
                        "docker",
                        "compose"
                    ],
                    "example": "docker"
                }
            }
        },
        "service.updateServiceComposeRequest": {
            "type": "object",
            "required": [
                "compose_file"
            ],
            "properties": {
                "compose_file": {
                    "type": "string"
                },
                "compose_file_path": {
                    "type": "string",
                    "maxLength": 500
                }
            }
        },
        "service.updateServiceEnvironmentItem": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "service.updateServiceEnvironmentsRequest": {
            "type": "object",
            "required": [
                "environments"
            ],
            "properties": {
                "environments": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/service.updateServiceEnvironmentItem"
                    }
                }
            }
        },
        "service.updateServiceRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "maxLength": 500
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 3
                },
                "status": {
                    "enum": [
                        "running",
                        "stopped",
                        "starting",
                        "stopping"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.ServiceState"
                        }
                    ]
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "docker",
                        "compose"
                    ]
                }
            }
        },
        "service.updateServiceStateRequest": {
            "type": "object",
            "required": [
                "state"
            ],
            "properties": {
                "state": {
                    "description": "Service state action (start, stop, restart)",
                    "type": "string",
                    "enum": [
                        "start",
                        "stop",
                        "restart"
                    ],
                    "example": "start"
                }
            }
        },
        "team.UpdateTeamRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 3
                }
            }
        },
        "team.createTeamRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 3
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Enter JWT Bearer token in the format: Bearer {token}",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8000",
	BasePath:         "/api",
	Schemes:          []string{"http", "https"},
	Title:            "starker Go API Template",
	Description:      "starker Go API Template",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}

basePath: /api
definitions:
  authsvc.LoginRequest:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 255
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  authsvc.RegisterRequest:
    properties:
      display_name:
        maxLength: 255
        minLength: 3
        type: string
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 255
        minLength: 8
        type: string
    required:
    - display_name
    - email
    - password
    type: object
  models.PrivateKey:
    properties:
      created_at:
        description: Timestamp when the key was created
        example: "2023-01-01T12:00:00Z"
        type: string
      description:
        description: Private key description
        example: SSH key for production servers
        type: string
      fingerprint:
        description: Key fingerprint
        example: SHA256:abc123...
        type: string
      id:
        description: Unique identifier for the private key
        example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
        type: string
      name:
        description: Private key name
        example: Production Key
        type: string
      private_key:
        description: The actual private key content
        example: '-----BEGIN PRIVATE KEY-----...'
        type: string
      team_id:
        description: Associated team ID
        example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
        type: string
      updated_at:
        description: Timestamp when the key was last updated
        example: "2023-01-01T12:00:00Z"
        type: string
    type: object
  models.Project:
    properties:
      created_at:
        description: Timestamp when the project was created
        example: "2023-01-01T12:00:00Z"
        type: string
      description:
        description: Project description
        example: A web application built with React
        type: string
      id:
        description: Unique identifier for the project
        example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
        type: string
      name:
        description: Project name
        example: My Web Application
        type: string
      team_id:
        description: Associated team ID
        example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
        type: string
      updated_at:
        description: Timestamp when the project was last updated
        example: "2023-01-01T12:00:00Z"
        type: string
    type: object
  models.Server:
    properties:
      created_at:
        description: Timestamp when the server was created
        example: "2023-01-01T12:00:00Z"
        type: string
      description:
        description: Server description
        example: Main production server
        type: string
      id:
        description: Unique identifier for the server
        example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
        type: string
      ip:
        description: Server IP address
        example: 192.168.1.100
        type: string
      name:
        description: Server name
        example: Production Server
        type: string
      port:
        description: SSH port
        example: "22"
        type: string
      private_key_id:
        description: Associated private key ID
        example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
        type: string
      team_id:
        description: Associated team ID
        example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
        type: string
      updated_at:
        description: Timestamp when the server was last updated
        example: "2023-01-01T12:00:00Z"
        type: string
      user:
        description: SSH username
        example: ubuntu
        type: string
    type: object
  models.Service:
    properties:
      container_id:
        description: Docker container ID
        example: abc123...
        type: string
      created_at:
        description: Timestamp when the service was created
        example: "2023-01-01T12:00:00Z"
        type: string
      description:
        description: Service description
        example: Main web application service
        type: string
      id:
        description: Unique identifier for the service
        example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
        type: string
      last_deployed_at:
        description: Timestamp when the service was last deployed
        example: "2023-01-01T12:00:00Z"
        type: string
      name:
        description: Service name
        example: web-app
        type: string
      project_id:
        description: Associated project ID
        example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
        type: string
      server_id:
        description: Associated server ID
        example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
        type: string
      state:
        allOf:
        - $ref: '#/definitions/models.ServiceState'
        description: Service state (running, stopped, etc.)
        example: running
      team_id:
        description: Associated team ID
        example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
        type: string
      type:
        description: Service type (e.g., docker, compose)
        example: docker
        type: string
      updated_at:
        description: Timestamp when the service was last updated
        example: "2023-01-01T12:00:00Z"
        type: string
    type: object
  models.ServiceComposeConfig:
    properties:
      compose_file:
        description: Docker compose file content
        example: 'version: ''3.8''...'
        type: string
      created_at:
        description: Timestamp when the config was created
        example: "2023-01-01T12:00:00Z"
        type: string
      id:
        description: Unique identifier for the compose config
        example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
        type: string
      service_id:
        description: Associated service ID
        example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
        type: string
      updated_at:
        description: Timestamp when the config was last updated
        example: "2023-01-01T12:00:00Z"
        type: string
    type: object
  models.ServiceState:
    enum:
    - running
    - stopped
    - starting
    - stopping
    - restarting
    type: string
    x-enum-varnames:
    - ServiceStateRunning
    - ServiceStateStopped
    - ServiceStateStarting
    - ServiceStateStopping
    - ServiceStateRestarting
  models.Team:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      owner_id:
        type: string
      updated_at:
        type: string
    type: object
  models.User:
    properties:
      avatar:
        description: URL to user's avatar image
        example: https://example.com/avatar.jpg
        type: string
      created_at:
        description: Timestamp when the user was created
        example: "2023-01-01T12:00:00Z"
        type: string
      display_name:
        description: Display name for the user
        example: John Doe
        type: string
      id:
        description: Unique identifier for the user
        example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
        type: string
      updated_at:
        description: Timestamp when the user was last updated
        example: "2023-01-01T12:00:00Z"
        type: string
    type: object
  privatekeysvc.CreatePrivateKeyRequest:
    properties:
      description:
        maxLength: 500
        type: string
      name:
        maxLength: 255
        minLength: 3
        type: string
      private_key:
        type: string
    required:
    - name
    - private_key
    type: object
  privatekeysvc.UpdatePrivateKeyRequest:
    properties:
      description:
        maxLength: 500
        type: string
      name:
        maxLength: 255
        minLength: 3
        type: string
      private_key:
        type: string
    type: object
  projectsvc.CreateProjectRequest:
    properties:
      description:
        maxLength: 500
        type: string
      name:
        maxLength: 255
        minLength: 3
        type: string
    required:
    - name
    type: object
  projectsvc.UpdateProjectRequest:
    properties:
      description:
        maxLength: 500
        type: string
      name:
        maxLength: 255
        minLength: 3
        type: string
    required:
    - name
    type: object
  response.ErrorResponse:
    properties:
      err_code:
        type: string
      message:
        type: string
    type: object
  response.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
    type: object
  serversvc.CreateServerRequest:
    properties:
      description:
        maxLength: 500
        type: string
      ip:
        type: string
      name:
        maxLength: 255
        minLength: 3
        type: string
      port:
        maxLength: 5
        minLength: 1
        type: string
      private_key_id:
        type: string
      user:
        maxLength: 255
        minLength: 1
        type: string
    required:
    - ip
    - name
    - port
    - private_key_id
    - user
    type: object
  serversvc.UpdateServerRequest:
    properties:
      description:
        maxLength: 500
        type: string
      ip:
        type: string
      name:
        maxLength: 255
        minLength: 3
        type: string
      port:
        maxLength: 5
        minLength: 1
        type: string
      private_key_id:
        type: string
      user:
        maxLength: 255
        minLength: 1
        type: string
    type: object
  service.CreateServiceGitRequest:
    properties:
      auto_deploy:
        description: Enable auto-deployment on Git changes
        example: true
        type: boolean
      branch:
        description: Git branch to deploy
        example: main
        type: string
      description:
        description: Optional service description
        example: Application from Git
        maxLength: 500
        type: string
      docker_compose_file_path:
        description: Path to docker-compose file in repo
        example: docker-compose.yml
        maxLength: 255
        type: string
      name:
        description: Service name
        example: my-app
        maxLength: 255
        minLength: 3
        type: string
      repo_url:
        description: Git repository URL
        example: https://github.com/user/repo.git
        type: string
      server_id:
        description: Server ID where service will be deployed
        example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
        type: string
    required:
    - branch
    - name
    - repo_url
    - server_id
    type: object
  service.createServiceRequest:
    properties:
      compose_file:
        description: Docker compose file content
        example: 'version: ''3.8''...'
        type: string
      description:
        description: Optional service description
        example: Web application service
        maxLength: 500
        type: string
      name:
        description: Service name
        example: web-app
        maxLength: 255
        minLength: 3
        type: string
      server_id:
        description: Server ID where service will be deployed
        example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
        type: string
      type:
        description: Service type (docker or compose)
        enum:
        - docker
        - compose
        example: docker
        type: string
    required:
    - compose_file
    - name
    - server_id
    - type
    type: object
  service.updateServiceStateRequest:
    properties:
      state:
        description: Service state action (start, stop, restart)
        enum:
        - start
        - stop
        - restart
        example: start
        type: string
    required:
    - state
    type: object
  servicesvc.UpdateServiceComposeRequest:
    properties:
      compose_file:
        type: string
      compose_file_path:
        maxLength: 500
        type: string
    required:
    - compose_file
    type: object
  servicesvc.UpdateServiceRequest:
    properties:
      description:
        maxLength: 500
        type: string
      name:
        maxLength: 255
        minLength: 3
        type: string
      status:
        allOf:
        - $ref: '#/definitions/models.ServiceState'
        enum:
        - running
        - stopped
        - starting
        - stopping
      type:
        enum:
        - docker
        - compose
        type: string
    type: object
  teamsvc.CreateTeamRequest:
    properties:
      name:
        maxLength: 255
        minLength: 3
        type: string
    required:
    - name
    type: object
host: localhost:8000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: starker Go API Template
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: starker Go API Template
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user with email and password, returns a refresh
        token cookie
      parameters:
      - description: Login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authsvc.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Invalid request body, user not found, or invalid password
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: User login
      tags:
      - auth
  /auth/oauth/{provider}:
    get:
      description: Redirects user to OAuth provider for authentication
      parameters:
      - description: OAuth provider (e.g., google, github)
        in: path
        name: provider
        required: true
        type: string
      - description: Redirect URL after successful OAuth linking
        in: query
        name: next
        type: string
      responses:
        "307":
          description: Redirect to OAuth provider
          schema:
            type: string
        "400":
          description: Invalid provider or bad request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Initiate OAuth flow
      tags:
      - oauth
  /auth/oauth/{provider}/callback:
    get:
      consumes:
      - application/json
      description: Handles OAuth provider callback, processes authorization code,
        creates/links user accounts, and issues authentication tokens
      parameters:
      - description: OAuth provider (e.g., google, github)
        in: path
        name: provider
        required: true
        type: string
      - description: Authorization code from OAuth provider
        in: query
        name: code
        required: true
        type: string
      - description: OAuth state parameter for CSRF protection
        in: query
        name: state
        required: true
        type: string
      produces:
      - application/json
      responses:
        "307":
          description: Redirect to success URL with authentication cookies set
          schema:
            type: string
        "400":
          description: Invalid provider, oauth state, or verification failed
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error during user creation or token generation
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: OAuth callback handler
      tags:
      - oauth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refreshes the access token and returns a new refresh token cookie
      produces:
      - application/json
      responses:
        "201":
          description: Access token generated successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  additionalProperties:
                    type: string
                  type: object
              type: object
        "400":
          description: Invalid request body, refresh token not found, or refresh token
            already used
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Refresh token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Creates a new user account with email and password
      parameters:
      - description: Registration request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authsvc.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Invalid request body or email already in use
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /teams:
    get:
      consumes:
      - application/json
      description: Gets all teams that the authenticated user is a member of
      produces:
      - application/json
      responses:
        "200":
          description: Teams retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Team'
                  type: array
              type: object
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user's teams
      tags:
      - team
    post:
      consumes:
      - application/json
      description: Creates a new team with the authenticated user as the owner
      parameters:
      - description: Create team request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/teamsvc.CreateTeamRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Team created successfully
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new team
      tags:
      - team
  /teams/{teamID}:
    delete:
      consumes:
      - application/json
      description: Deletes a team if the authenticated user is the owner
      parameters:
      - description: Team ID
        in: path
        name: teamID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Team deleted successfully
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Team ID is required
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Only team owner can delete the team
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Team not found or user is not a member
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a team
      tags:
      - team
    get:
      consumes:
      - application/json
      description: Gets a specific team by ID if the authenticated user is a member
        of it
      parameters:
      - description: Team ID
        in: path
        name: teamID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Team retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Team'
              type: object
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Team not found or user is not a member
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a specific team
      tags:
      - team
  /teams/{teamID}/private-keys:
    get:
      consumes:
      - application/json
      description: Retrieves all private keys associated with a specific team
      parameters:
      - description: Team ID
        in: path
        name: teamID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Private keys retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.PrivateKey'
                  type: array
              type: object
        "400":
          description: Team access denied
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all private keys for a team
      tags:
      - privatekey
    post:
      consumes:
      - application/json
      description: Creates a new private key for SSH authentication within a team
      parameters:
      - description: Team ID
        in: path
        name: teamID
        required: true
        type: string
      - description: Private key creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/privatekeysvc.CreatePrivateKeyRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Private key created successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.PrivateKey'
              type: object
        "400":
          description: Invalid request body or team access denied
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new private key
      tags:
      - privatekey
  /teams/{teamID}/private-keys/{privateKeyID}:
    delete:
      consumes:
      - application/json
      description: Deletes a specific private key by ID within a team
      parameters:
      - description: Team ID
        in: path
        name: teamID
        required: true
        type: string
      - description: Private Key ID
        in: path
        name: privateKeyID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Private key deleted successfully
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Team access denied
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Private key not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a private key
      tags:
      - privatekey
    get:
      consumes:
      - application/json
      description: Retrieves a specific private key by ID within a team
      parameters:
      - description: Team ID
        in: path
        name: teamID
        required: true
        type: string
      - description: Private Key ID
        in: path
        name: privateKeyID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Private key retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.PrivateKey'
              type: object
        "400":
          description: Team access denied
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Private key not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a specific private key
      tags:
      - privatekey
    patch:
      consumes:
      - application/json
      description: Updates a specific private key by ID within a team
      parameters:
      - description: Team ID
        in: path
        name: teamID
        required: true
        type: string
      - description: Private Key ID
        in: path
        name: privateKeyID
        required: true
        type: string
      - description: Private key update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/privatekeysvc.UpdatePrivateKeyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Private key updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.PrivateKey'
              type: object
        "400":
          description: Invalid request body or team access denied
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Private key not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a private key
      tags:
      - privatekey
  /teams/{teamID}/projects:
    get:
      description: Retrieves all projects that belong to a specific team
      parameters:
      - description: Team ID
        in: path
        name: teamID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Projects retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Project'
                  type: array
              type: object
        "400":
          description: Team access denied
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all projects in a team
      tags:
      - project
    post:
      consumes:
      - application/json
      description: Creates a new project within a team for managing deployments and
        configurations
      parameters:
      - description: Team ID
        in: path
        name: teamID
        required: true
        type: string
      - description: Project creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/projectsvc.CreateProjectRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Project created successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Project'
              type: object
        "400":
          description: Invalid request body or team access denied
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new project
      tags:
      - project
  /teams/{teamID}/projects/{projectID}:
    delete:
      description: Deletes an existing project from a team
      parameters:
      - description: Team ID
        in: path
        name: teamID
        required: true
        type: string
      - description: Project ID
        in: path
        name: projectID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Project deleted successfully
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Team access denied
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Project not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a project
      tags:
      - project
    get:
      description: Retrieves a specific project by its ID within a team
      parameters:
      - description: Team ID
        in: path
        name: teamID
        required: true
        type: string
      - description: Project ID
        in: path
        name: projectID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Project retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Project'
              type: object
        "400":
          description: Team access denied
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Project not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a specific project
      tags:
      - project
    put:
      consumes:
      - application/json
      description: Updates an existing project within a team
      parameters:
      - description: Team ID
        in: path
        name: teamID
        required: true
        type: string
      - description: Project ID
        in: path
        name: projectID
        required: true
        type: string
      - description: Project update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/projectsvc.UpdateProjectRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Project updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Project'
              type: object
        "400":
          description: Invalid request body or team access denied
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Project not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a project
      tags:
      - project
  /teams/{teamID}/projects/{projectID}/services:
    get:
      consumes:
      - application/json
      description: Retrieves all services belonging to a specific project within a
        team
      parameters:
      - description: Team ID
        in: path
        name: teamID
        required: true
        type: string
      - description: Project ID
        in: path
        name: projectID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of services
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Service'
                  type: array
              type: object
        "400":
          description: Team access denied
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all services for a project
      tags:
      - service
  /teams/{teamID}/projects/{projectID}/services/{serviceID}:
    delete:
      description: Deletes a service including stopping Docker containers, removing
        networks/volumes, and cleaning up all related database records
      parameters:
      - description: Team ID
        in: path
        name: teamID
        required: true
        type: string
      - description: Project ID
        in: path
        name: projectID
        required: true
        type: string
      - description: Service ID
        in: path
        name: serviceID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Service deleted successfully
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Invalid request or team access denied
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Service not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete service with complete cleanup
      tags:
      - service
    get:
      consumes:
      - application/json
      description: Retrieves a specific service by its ID within a project and team
      parameters:
      - description: Team ID
        in: path
        name: teamID
        required: true
        type: string
      - description: Project ID
        in: path
        name: projectID
        required: true
        type: string
      - description: Service ID
        in: path
        name: serviceID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Service details
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Service'
              type: object
        "400":
          description: Team access denied or service not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a single service by ID
      tags:
      - service
    patch:
      consumes:
      - application/json
      description: Updates service metadata (name, description, type) within a team
        and project
      parameters:
      - description: Team ID
        in: path
        name: teamID
        required: true
        type: string
      - description: Project ID
        in: path
        name: projectID
        required: true
        type: string
      - description: Service ID
        in: path
        name: serviceID
        required: true
        type: string
      - description: Service update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/servicesvc.UpdateServiceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Service updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Service'
              type: object
        "400":
          description: Invalid request body or team access denied
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Service not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update service metadata
      tags:
      - service
  /teams/{teamID}/projects/{projectID}/services/{serviceID}/compose:
    get:
      consumes:
      - application/json
      description: Retrieves the Docker Compose configuration for a specific service
      parameters:
      - description: Team ID
        in: path
        name: teamID
        required: true
        type: string
      - description: Project ID
        in: path
        name: projectID
        required: true
        type: string
      - description: Service ID
        in: path
        name: serviceID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Service compose configuration
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.ServiceComposeConfig'
              type: object
        "400":
          description: Team access denied or compose config not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get service Docker Compose configuration
      tags:
      - service
    patch:
      consumes:
      - application/json
      description: Updates the Docker Compose configuration for a specific service
      parameters:
      - description: Team ID
        in: path
        name: teamID
        required: true
        type: string
      - description: Project ID
        in: path
        name: projectID
        required: true
        type: string
      - description: Service ID
        in: path
        name: serviceID
        required: true
        type: string
      - description: Service compose update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/servicesvc.UpdateServiceComposeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Compose config updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.ServiceComposeConfig'
              type: object
        "400":
          description: Invalid request body, team access denied, or service not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update service Docker Compose configuration
      tags:
      - service
  /teams/{teamID}/projects/{projectID}/services/{serviceID}/state:
    patch:
      consumes:
      - application/json
      description: Updates service state (start/stop/restart) with real-time progress
        streaming via Server-Sent Events
      parameters:
      - description: Team ID
        in: path
        name: teamID
        required: true
        type: string
      - description: Project ID
        in: path
        name: projectID
        required: true
        type: string
      - description: Service ID
        in: path
        name: serviceID
        required: true
        type: string
      - description: Service state update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/service.updateServiceStateRequest'
      produces:
      - text/event-stream
      responses:
        "200":
          description: SSE stream of service state updates
          schema:
            type: string
        "400":
          description: Invalid request body or team access denied
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Service not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update service state with SSE streaming
      tags:
      - service
  /teams/{teamID}/projects/{projectID}/services/compose:
    post:
      consumes:
      - application/json
      description: Creates a new service with Docker compose configuration within
        a team and project
      parameters:
      - description: Team ID
        in: path
        name: teamID
        required: true
        type: string
      - description: Project ID
        in: path
        name: projectID
        required: true
        type: string
      - description: Service creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/service.createServiceRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Service created successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Service'
              type: object
        "400":
          description: Invalid request body, team access denied, or project not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new service
      tags:
      - service
  /teams/{teamID}/projects/{projectID}/services/git:
    post:
      consumes:
      - application/json
      description: Creates a new service by cloning a Git repository and extracting
        Docker Compose configuration
      parameters:
      - description: Team ID
        in: path
        name: teamID
        required: true
        type: string
      - description: Project ID
        in: path
        name: projectID
        required: true
        type: string
      - description: Git service creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/service.CreateServiceGitRequest'
      produces:
      - text/plain
      responses:
        "200":
          description: Server-Sent Events stream with git workflow progress
          schema:
            type: string
        "400":
          description: Invalid request body, team access denied, or project not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a service from a Git repository
      tags:
      - service
  /teams/{teamID}/servers:
    get:
      consumes:
      - application/json
      description: Gets all server configurations within a team that the user has
        access to
      parameters:
      - description: Team ID
        in: path
        name: teamID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Servers retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Server'
                  type: array
              type: object
        "400":
          description: Team access denied
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all servers for a team
      tags:
      - server
    post:
      consumes:
      - application/json
      description: Creates a new server configuration for SSH connections within a
        team. Tests the connection before saving.
      parameters:
      - description: Team ID
        in: path
        name: teamID
        required: true
        type: string
      - description: Server creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/serversvc.CreateServerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Server created successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Server'
              type: object
        "400":
          description: Invalid request body, team access denied, or server connection
            failed
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new server
      tags:
      - server
  /teams/{teamID}/servers/{serverID}:
    delete:
      consumes:
      - application/json
      description: Deletes a specific server configuration by ID within a team
      parameters:
      - description: Team ID
        in: path
        name: teamID
        required: true
        type: string
      - description: Server ID
        in: path
        name: serverID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Server deleted successfully
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Team access denied
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Server not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a server
      tags:
      - server
    get:
      consumes:
      - application/json
      description: Gets a specific server configuration by ID within a team that the
        user has access to
      parameters:
      - description: Team ID
        in: path
        name: teamID
        required: true
        type: string
      - description: Server ID
        in: path
        name: serverID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Server retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Server'
              type: object
        "400":
          description: Team access denied
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Server not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a specific server
      tags:
      - server
    put:
      consumes:
      - application/json
      description: Updates an existing server configuration within a team
      parameters:
      - description: Team ID
        in: path
        name: teamID
        required: true
        type: string
      - description: Server ID
        in: path
        name: serverID
        required: true
        type: string
      - description: Server update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/serversvc.UpdateServerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Server updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Server'
              type: object
        "400":
          description: Invalid request body or team access denied
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Server not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a server
      tags:
      - server
  /users/me:
    get:
      consumes:
      - application/json
      description: Retrieves the profile information of the currently authenticated
        user
      produces:
      - application/json
      responses:
        "200":
          description: User profile information
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "401":
          description: Unauthorized - invalid or missing token
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get current user information
      tags:
      - user
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: 'Enter JWT Bearer token in the format: Bearer {token}'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
